name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: your-docker-repo/cms  # Замените на ваш Docker образ
  VPS_HOST: ${{ secrets.VPS_HOST }}   # Хост сервера из secrets
  VPS_USER: ${{ secrets.VPS_USER }}   # Пользователь сервера
  VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}  # SSH ключ для доступа

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    outputs:
      scan-result: ${{ steps.semgrep.outputs.result }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Полная история коммитов для анализа

    # Статический анализ кода с Semgrep
    - name: Run Semgrep SAST
      id: semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: "p/security-audit"
        output-format: sarif
        severity: ERROR
      continue-on-error: true

    # Загрузка результатов в GitHub Security
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif

    # Анализ зависимостей на уязвимости
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: "CMS"
        scan-dir: "."
        format: "ALL"
        fail-on-cvss: 7
        suppression-file: ".github/dependency-check-suppression.xml"

    # Проверка на утечки секретов
    - name: Detect secrets with Gitleaks
      uses: zricethezav/gitleaks-action@v2
      with:
        config-path: ".github/gitleaks.toml"
        redact: true

    # Проверка инфраструктурного кода
    - name: Check Infrastructure as Code
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: ./
        skip_check: CKV_DOCKER_3,CKV_DOCKER_8
        soft_fail: true

    # Сохранение отчетов
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          dependency-check-report.html
          semgrep.sarif

  build:
    name: Build and Scan Container
    needs: security-scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Логин в Docker Hub
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Сборка Docker образа
    - name: Build and tag Docker image
      run: |
        docker build \
          --tag $DOCKER_IMAGE:latest \
          --tag $DOCKER_IMAGE:${{ github.sha }} \
          --label "org.opencontainers.image.source=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
          --label "org.opencontainers.image.revision=$GITHUB_SHA" \
          --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          .

    # Сканирование образа на уязвимости
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: $DOCKER_IMAGE:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
        vuln-type: 'os,library'

    # Загрузка результатов сканирования
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif

    # Генерация SBOM
    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: $DOCKER_IMAGE:latest
        format: 'spdx-json'
        output: 'sbom.spdx.json'

    # Push образа в registry
    - name: Push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker push $DOCKER_IMAGE:latest
        docker push $DOCKER_IMAGE:${{ github.sha }}

  deploy:
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production  # Используем GitHub Environments

    steps:
    - uses: actions/checkout@v3

    # Установка SSH ключа
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.VPS_SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    # Развертывание через Ansible
    - name: Deploy with Ansible
      uses: arillso/ansible.action@v0.12.0
      with:
        playbook: .github/playbooks/deploy.yml
        inventory: ${{ secrets.VPS_HOST }},
        options: |
          --user=${{ secrets.VPS_USER }}
          --private-key=$HOME/.ssh/id_rsa
          --extra-vars "image=$DOCKER_IMAGE:${{ github.sha }}"

    # DAST тестирование после деплоя
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: https://${{ env.VPS_HOST }}
        rules: .github/zap.conf
        fail_action: warn

    # Уведомление в Slack
    - name: Send Slack notification
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: "Deployment ${{ job.status }}"
        SLACK_MESSAGE: "Build ${{ github.run_number }} for ${{ github.repository }}"
